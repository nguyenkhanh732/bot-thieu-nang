const Discord = require('discord.js')
const { ActionRowBuilder, ButtonBuilder, Client, CommandInteraction } = require("discord.js");

module.exports = {
    name: "loop",
    description: "Thi·∫øt ƒë·∫∑t l·∫∑p nh·∫°c",
    aliases: ["repeat", "rp"],
    inVoiceChannel: true,
    options: [
        {
            name: "mode",
            type: 3,
            description: "Ch·∫ø ƒë·ªô l·∫∑p",
            required: true,
            choices: [
                {
                    name: "T·∫Øt",
                    value: "1"
                },
                {
                    name: "üîÇ ƒê∆°n b√†i",
                    value: "2"
                },
                {
                    name: "üîÅ T·∫•t c·∫£",
                    value: "3"
                },
                {
                    name: "Hi·ªÉn th·ªã c√°ch l·∫∑p hi·ªán t·∫°i",
                    value: "4"
                },
            ]
        }
    ],

    /**
    *
    * @param {Client} client
    * @param {CommandInteraction} interaction
    * @param {Object[]} option //{ name: 'id', type: 'INTEGER', value: 69 }
    */
    async run (client, interaction, option) {
        
        if (!interaction.member.voice.channel) return interaction.reply({content: `${client.emotes.error} |  B·∫°n ph·∫£i ·ªü trong m·ªôt k√™nh n√≥i`, ephemeral: true});
        if (interaction.guild.members.me.voice.channel && interaction.member.voice.channel.id !== interaction.guild.members.me.voice.channel.id) return interaction.reply({content: `${client.emotes.error} |  B·∫°n ph·∫£i ·ªü c√πng k√™nh n√≥i v·ªõi Bot`, ephemeral: true}); 

        const queue = client.distube.getQueue(interaction)
        if (!queue) return interaction.reply({content: `${client.emotes.error} | Ch·∫£ c√≥ g√¨ ƒëang ph√°t c·∫£!`, ephemeral: true});
        let mode = null
        switch (option[0].value) {
            case "1":
                mode = 0
                break
            case "2":
                mode = 1
                break
            case "3":
                mode = 2
                break
            case "4":
                mode = 4
                break
        }
        if (mode == 4) return interaction.reply(`${client.emotes.repeat} | L·∫∑p: ${queue.repeatMode ? queue.repeatMode === 2 ? "T·∫•t c·∫£" : "B√†i n√†y" : "T·∫Øt"}`)
        mode = queue.setRepeatMode(mode)
        mode = mode ? mode === 2 ? "L·∫∑p to√†n b·ªô" : "L·∫∑p ƒë∆°n b√†i" : "T·∫Øt"
        interaction.reply(`${mode == "L·∫∑p ƒë∆°n b√†i" ? client.emotes.single : client.emotes.repeat} | Ch·ªânh ch·∫ø ƒë·ªô l·∫∑p th√†nh **${mode}**`)
    }
}