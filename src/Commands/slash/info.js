const fs = require("fs");
const config = JSON.parse(fs.readFileSync("config.json"));
const package = JSON.parse(fs.readFileSync("package.json"));
const os = require("os");
const totalRAM = os.totalmem();

const cmdFolder = config.source.command;
const slsFolder = config.source.slash;
const assets = config.assets;

const Discord = require("discord.js");
const { EmbedBuilder } = require("discord.js");
const {
	ActionRowBuilder,
	ButtonBuilder,
	Client,
	CommandInteraction,
} = require("discord.js");

module.exports = {
	name: "info",
	description: "Th√¥ng tin v·ªÅ Bot",
	/**
	 *
	 * @param {Client} client
	 * @param {CommandInteraction} interaction
	 * @param {Object[]} option //{ name: 'id', type: 'INTEGER', value: 69 }
	 */
	async run(client, interaction, option) {
		var command, slash, cpustring = "";
		const cmdcount = fs.readdirSync(cmdFolder).length;
    	const slscount = fs.readdirSync(slsFolder).length;
		const cpu = os.cpus();
		for (const core of cpu) {
			cpustring += "`" + core.model + "`" + "\n";
		}
		const osEmbed = new EmbedBuilder()
			.setTitle(`üñ•Ô∏è H·ªá th·ªëng`)
			.setColor("Blue")
			.setDescription(`**Powered by Konfuse** <3`)
			.addFields(
				{
					name: "üñ•Ô∏è H·ªá ƒëi·ªÅu h√†nh",
					value: `\`${os.version()} ${os.arch()}\``,
					inline: true,
				},
				{
					name: "üíø RAM",
					value: `${(
						Math.round((totalRAM / 1024 / 1024 / 1024) * 100) / 100
					).toString()} GB`,
					inline: true,
				},
				{
					name: "‚åõ PC Runtime",
					value: `${(
						Math.round((os.uptime().toFixed(1) / 3600) * 1000) / 1000
					).toString()}h`,
					inline: true,
				},
				{
					name: "üî≤ CPU",
					value: cpustring,
				}
			);
		const botEmbed = new EmbedBuilder()
			.setTitle(`ü§ñ Bot`)
			.setColor("Purple")
			.addFields(
				{
					name: "üè∑Ô∏è T√™n",
					value: client.user.username,
					inline: true,
				},
				{
					name: "üì≤ Prefix",
					value: config.prefix,
					inline: true,
				},
				{
					name: ":balloon: Ng√†y tham gia",
					value: `${client.user.createdAt.getDate()}/${client.user.createdAt.getMonth()}/${client.user.createdAt.getFullYear()}`,
					inline: true
				},
				{
					name: "üõ†Ô∏è Version",
					value: package.version,
					inline: true,
				},
				{
					name: "üí¨ S·ªë l·ªánh ch·ªØ",
					value: cmdcount.toString(),
					inline: true,
				},
				{
					name: "‚õèÔ∏è S·ªë l·ªánh Slash",
					value: slscount.toString(),
					inline: true,
				},
				{
					name: "‚åõ Bot Runtime",
					value: `${(
						Math.round((process.uptime().toFixed(1) / 3600) * 1000) / 1000
					).toString()}h`,
					inline: true,
				},{
					name: "üíø Node.js Version",
					value: process.version,
					inline: true,
				},
				{
					name: "üíé Discord.js Version",
					value: package.dependencies["discord.js"],
					inline: true,
				},
			);
		const actiEmbed = new EmbedBuilder()
			.setTitle(`üåê Ho·∫°t ƒë·ªông`)
			.setColor("Green")
			.addFields(
				{
					name: "üì° S·ªë M√°y ch·ªß",
					value: client.guilds.cache.size.toString(),
					inline: true,
				},
				{
					name: ":tv: S·ªë k√™nh",
					value: client.channels.cache.size.toString(),
					inline: true,
				},
				{
					name: "üë§ S·ªë Ng∆∞·ªùi d√πng",
					value: client.users.cache.size.toString(),
					inline: true,
				},
				{
					name: "üèì Bot Latency",
					value: `${Date.now() - interaction.createdTimestamp}ms`,
					inline: true,
				},
				{
					name: "‚òéÔ∏è API Latency",
					value: `${Math.round(client.ws.ping)}ms`,
					inline: true,
				}
			)
			.setTimestamp();
		interaction.reply({embeds: [botEmbed, osEmbed, actiEmbed], ephemeral: true});
	},
};
